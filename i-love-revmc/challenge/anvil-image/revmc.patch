diff --git a/Cargo.lock b/Cargo.lock
index d64fb13..a2154f7 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -2090,9 +2090,7 @@ dependencies = [
 
 [[package]]
 name = "revm"
-version = "14.0.1"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "1f719e28cc6fdd086f8bc481429e587740d20ad89729cec3f5f5dd7b655474df"
+version = "14.0.0"
 dependencies = [
  "auto_impl",
  "cfg-if",
@@ -2103,9 +2101,7 @@ dependencies = [
 
 [[package]]
 name = "revm-interpreter"
-version = "10.0.1"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "959ecbc36802de6126852479844737f20194cf8e6718e0c30697d306a2cca916"
+version = "10.0.0"
 dependencies = [
  "paste",
  "phf",
@@ -2115,9 +2111,7 @@ dependencies = [
 
 [[package]]
 name = "revm-precompile"
-version = "11.0.1"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "6e25f604cb9db593ca3013be8c00f310d6790ccb1b7d8fbbdd4660ec8888043a"
+version = "11.0.0"
 dependencies = [
  "aurora-engine-modexp",
  "cfg-if",
@@ -2131,9 +2125,7 @@ dependencies = [
 
 [[package]]
 name = "revm-primitives"
-version = "9.0.1"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "0ccb981ede47ccf87c68cebf1ba30cdbb7ec935233ea305f3dfff4c1e10ae541"
+version = "9.0.0"
 dependencies = [
  "alloy-eips",
  "alloy-primitives",
diff --git a/Cargo.toml b/Cargo.toml
index 7e2cf1b..acf3129 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -44,9 +44,9 @@ revmc-cranelift = { version = "0.1.0", path = "crates/revmc-cranelift", default-
 revmc-llvm = { version = "0.1.0", path = "crates/revmc-llvm", default-features = false }
 
 alloy-primitives = { version = "0.8", default-features = false }
-revm = { version = "14.0", default-features = false }
-revm-primitives = { version = "9.0", default-features = false }
-revm-interpreter = { version = "10.0", default-features = false }
+revm = { path = "../revm/crates/revm", default-features = false }
+revm-primitives = { path = "../revm/crates/primitives", default-features = false }
+revm-interpreter = { path = "../revm/crates/interpreter", default-features = false }
 ruint = { version = "1.12", default-features = false }
 
 color-eyre = "0.6"
diff --git a/crates/revmc/src/compiler/translate.rs b/crates/revmc/src/compiler/translate.rs
index 963d306..d68dc87 100644
--- a/crates/revmc/src/compiler/translate.rs
+++ b/crates/revmc/src/compiler/translate.rs
@@ -910,8 +910,9 @@ impl<'a, B: Backend> FunctionCx<'a, B> {
                 env_field!(@push @[endian = "little"] self.word_type, Env, BlockEnv; block.basefee)
             }
             op::BLOBHASH => {
-                let sp = self.sp_after_inputs();
-                let _ = self.call_builtin(Builtin::BlobHash, &[self.ecx, sp]);
+                let index = self.pop();
+                let r = self.call_blobhash(index);
+                self.push(r);
             }
             op::BLOBBASEFEE => {
                 let len = self.len_before();
@@ -1832,6 +1833,76 @@ impl<'a, B: Backend> FunctionCx<'a, B> {
         self.bcx.ret(&[r]);
     }
 
+    fn call_blobhash(&mut self, index: B::Value) -> B::Value {
+        self.call_ir_builtin(
+            "blobhash",
+            &[index, self.env],
+            &[self.word_type, self.ptr_type],
+            Some(self.word_type),
+            Self::build_blobhash,
+        )
+        .unwrap()
+    }
+
+    fn build_blobhash(&mut self) {
+        let index = self.bcx.fn_param(0);
+        let env = self.bcx.fn_param(1);
+
+        let isize_type = self.isize_type;
+        let word_type = self.word_type;
+
+        let tx_env_offset = mem::offset_of!(Env, tx);
+        let blobhash_offset = mem::offset_of!(TxEnv, blob_hashes);
+        let blobhash_len_offset = mem::offset_of!(pf::Vec<revm_primitives::B256>, len);
+        let blobhash_ptr_offset = mem::offset_of!(pf::Vec<revm_primitives::B256>, ptr);
+
+        let blobhash_len_ptr = self.get_field(
+            env,
+            tx_env_offset + blobhash_offset + blobhash_len_offset,
+            "env.tx.blobhashes.len.addr",
+        );
+        let blobhash_ptr_ptr = self.get_field(
+            env,
+            tx_env_offset + blobhash_offset + blobhash_ptr_offset,
+            "env.tx.blobhashes.ptr.addr",
+        );
+
+        let blobhash_len = self.bcx.load(isize_type, blobhash_len_ptr, "env.tx.blobhashes.len");
+        // convert to u256
+        let blobhash_len = self.bcx.zext(word_type, blobhash_len);
+
+        // check for out of bounds
+        let in_bounds = self.bcx.icmp(IntCC::UnsignedLessThan, index, blobhash_len);
+        let zero = self.bcx.iconst_256(U256::ZERO);
+
+        // if out of bounds, return 0
+        let r = self.bcx.lazy_select(
+            in_bounds,
+            word_type,
+            |bcx| {
+                let index = bcx.ireduce(isize_type, index);
+                let blobhash_ptr =
+                    bcx.load(self.ptr_type, blobhash_ptr_ptr, "env.tx.blobhashes.ptr");
+
+                let address = bcx.gep(word_type, blobhash_ptr, &[index], "blobhash.addr");
+                let tmp = bcx.new_stack_slot(word_type, "blobhash.addr");
+                tmp.store(bcx, zero);
+                let tmp_addr = tmp.addr(bcx);
+                let tmp_word_size = bcx.iconst(isize_type, 32);
+                bcx.memcpy(tmp_addr, address, tmp_word_size);
+
+                let mut value = tmp.load(bcx, "blobhash.i256");
+                if cfg!(target_endian = "little") {
+                    value = bcx.bswap(value);
+                }
+                value
+            },
+            |_bcx| zero,
+        );
+
+        self.bcx.ret(&[r]);
+    }
+
     fn call_calldataload(&mut self, index: B::Value) -> B::Value {
         self.call_ir_builtin(
             "calldataload",
