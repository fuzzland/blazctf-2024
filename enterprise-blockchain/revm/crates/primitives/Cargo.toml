[package]
authors = ["Dragan Rakita <dragan0rakita@gmail.com>"]
description = "REVM primitives"
edition = "2021"
keywords = ["no_std", "ethereum", "evm", "revm", "types"]
license = "MIT"
name = "revm-primitives"
repository = "https://github.com/bluealloy/revm"
version = "1.1.2"
readme = "../../README.md"

[dependencies]
bytes = { version = "1.4", default-features = false }
hashbrown = { version = "0.13" }
hex = { version = "0.4", default-features = false }
primitive-types = { version = "0.12", default-features = false }
rlp = { version = "0.5", default-features = false } # used for create2 address calculation
ruint = { version = "1.8.0", features = ["primitive-types", "rlp"] }
auto_impl = "1.0"
bitvec = { version = "1", default-features = false, features = ["alloc"] }

# bits B256 B160 crate
fixed-hash = { version = "0.8", default-features = false, features = [
    "rustc-hex",
] }

#utility
hex-literal = "0.4"
derive_more = "0.99"
enumn = "0.1"

# sha3 keccak hasher
sha3 = { version = "0.10", default-features = false, features = [] }

# optional
serde = { version = "1.0", features = ["derive", "rc"], optional = true }
arbitrary = { version = "1.3", features = ["derive"], optional = true }
proptest = { version = "1.1", optional = true }
proptest-derive = { version = "0.3", optional = true }

[dev-dependencies]
arbitrary = { version = "1.3", features = ["derive"] }
proptest = { version = "1.1" }
proptest-derive = "0.3"
ruint = { version = "1.8.0", features = [
    "primitive-types",
    "rlp",
    "proptest",
    "arbitrary",
] }

[features]
default = ["std"]
dev = [
    "memory_limit",
    "optional_balance_check",
    "optional_block_gas_limit",
    "optional_eip3607",
    "optional_gas_refund",
    "optional_no_base_fee",
]
memory_limit = []
no_gas_measuring = []
optional_balance_check = []
optional_block_gas_limit = []
optional_eip3607 = []
optional_gas_refund = []
optional_no_base_fee = []
std = ["bytes/std", "rlp/std", "hex/std", "bitvec/std"]
serde = [
    "dep:serde",
    "hex/serde",
    "hashbrown/serde",
    "ruint/serde",
    "bytes/serde",
    "bitvec/serde"
]
arbitrary = [
    "std",
    "ruint/arbitrary",
    "ruint/proptest",
    "dep:arbitrary",
    "dep:proptest",
    "dep:proptest-derive",
]
